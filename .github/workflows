# delete all remote tags (linux version)
# git ls-remote --tags origin | awk '/^(.*)(s+)(.*[a-zA-Z0-9])$/ {print ":" $2}' | xargs git push origin

# delete one remote tag & matching local tag
# git push --delete origin <tag_name> & git tag -d <tag_name>
# example: git push --delete origin v1.0 & git tag -d v1.0


# note:
# the git command line doesn't have permissions to delete releases, only tags (it's part of Github only)


# execute github workflow
# git tag <release_name> (must include v in release name) & git push origin <release_name>
# example: git tag v1.0 & git push origin v1.0



on:
  push:
    tags:
    - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get tag reference id
            # parse the github reference tag from the direct input (github.ref)
        run: |
             githubRef=${{ github.ref }}
             githubRef="${githubRef/'refs/tags'/''}"
             githubRef="${githubRef/'/'/''}"
             githubRef="${githubRef/'v'/''}"
             echo "releaseLabel=$githubRef" >> $GITHUB_ENV
      - name: Read exported variable - (test to verify the dynamic releaseLabel Variable is global)
        run: |
          echo $releaseLabel
     # create project directory
      - name: Create compiled project directory
        run: mkdir compiledProjectDirectory


     # Zip project
      - name: Zip configured project directory into downloadable release.zip file
        run: cd compiledProjectDirectory; zip -r ../bluewave_tx-${{ env.releaseLabel }}.zip *


     # Create the release to serve as a place to export to
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
        with:
          tag_name: ${{ env.releaseLabel }}
          release_name: Release ${{ env.releaseLabel }}
          body: |
            BlueWave Neo4j Plugin Release ${{ env.releaseLabel }}
          draft: false
          prerelease: false

     # add packaged project to Github Release page
      - name: Upload packaged project to Github Release page
        id: upload-release-asset-minified
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: bluewave_tx-${{ env.releaseLabel }}.zip
          asset_name: bluewave_tx-${{ env.releaseLabel }}.zip
          asset_content_type: application/zip
